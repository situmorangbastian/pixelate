// Code generated by mockery v2.42.1. DO NOT EDIT.

package mocks

import (
	multipart "mime/multipart"

	mock "github.com/stretchr/testify/mock"
)

// ImageService is an autogenerated mock type for the ImageService type
type ImageService struct {
	mock.Mock
}

// Compress provides a mock function with given fields: file
func (_m *ImageService) Compress(file *multipart.FileHeader) (string, error) {
	ret := _m.Called(file)

	if len(ret) == 0 {
		panic("no return value specified for Compress")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(*multipart.FileHeader) (string, error)); ok {
		return rf(file)
	}
	if rf, ok := ret.Get(0).(func(*multipart.FileHeader) string); ok {
		r0 = rf(file)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(*multipart.FileHeader) error); ok {
		r1 = rf(file)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ConvertPngToJpg provides a mock function with given fields: file
func (_m *ImageService) ConvertPngToJpg(file *multipart.FileHeader) (string, error) {
	ret := _m.Called(file)

	if len(ret) == 0 {
		panic("no return value specified for ConvertPngToJpg")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(*multipart.FileHeader) (string, error)); ok {
		return rf(file)
	}
	if rf, ok := ret.Get(0).(func(*multipart.FileHeader) string); ok {
		r0 = rf(file)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(*multipart.FileHeader) error); ok {
		r1 = rf(file)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Resize provides a mock function with given fields: file, scale
func (_m *ImageService) Resize(file *multipart.FileHeader, scale string) (string, error) {
	ret := _m.Called(file, scale)

	if len(ret) == 0 {
		panic("no return value specified for Resize")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(*multipart.FileHeader, string) (string, error)); ok {
		return rf(file, scale)
	}
	if rf, ok := ret.Get(0).(func(*multipart.FileHeader, string) string); ok {
		r0 = rf(file, scale)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(*multipart.FileHeader, string) error); ok {
		r1 = rf(file, scale)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewImageService creates a new instance of ImageService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewImageService(t interface {
	mock.TestingT
	Cleanup(func())
}) *ImageService {
	mock := &ImageService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
